@page "/todolist"
@using H4SoftwareTestOgSikkerhed.Data
@using H4SoftwareTestOgSikkerhed.Models
@using Microsoft.AspNetCore.Identity

@inject AuthenticationStateProvider _authenticationStateProvider;
@inject NavigationManager Navigation
@inject ToDoDBContext _dbContext;
@inject UserManager<Data.ApplicationUser> _userManager

<PageTitle>Todo List</PageTitle>


<div class="container mt-4">
	<div class="row justify-content-center">
		<div class="col-md-6">
			<EditForm Model="Model" OnSubmit="AddTodoItemAsync" FormName="TodoList" class="border p-4 rounded shadow-sm">
				<div class="mb-3">
					<label for="nameInput" class="form-label">Add Item To Todo List</label>
					<InputText id="nameInput" @bind-Value="Model.Name" class="form-control" />
				</div>
				<div class="d-grid">
					<button type="submit" class="btn btn-primary">Add</button>
				</div>
			</EditForm>
		</div>
	</div>
	@if(ErrorMessage != null && ErrorMessage.Trim() != "")
	{
		<div class="text-center">
			<p class="text-danger">@ErrorMessage</p>
		</div>
	}
</div>


<div class="container mt-4">
	@if (TodoItems.Count > 0)
	{
		<div>
			<h3>Todo Items</h3>
			<hr />
			@foreach (var item in TodoItems)
			{
				<div>
					@item.Name
					<hr />
				</div>
			}
		</div>
	}
</div>


@code {
	// https://learn.microsoft.com/en-us/aspnet/core/blazor/forms/?view=aspnetcore-9.0

	[SupplyParameterFromForm]
	public TodoItem? Model { get; set; }
	
	private List<TodoItem> TodoItems { get; set; } = new();
	private string ErrorMessage;

	protected override async Task OnInitializedAsync()
	{
		Model ??= new();
		var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		bool isAuthenticated = user.Identity.IsAuthenticated;

		if (!user.Identity?.IsAuthenticated ?? false)
		{
			Navigation.NavigateTo("/Account/Login", forceLoad: true);
		}

		LoadTodoItems();
	} 

	private async Task AddTodoItemAsync()
	{
		if(Model.Name == null)
		{
			ErrorMessage = "You Must Write Something In The Todo List!";
		}
		else if (Model.Name.Trim() == "")
		{
			ErrorMessage = "Todo List Cannot Only Contain White-Space!";
		}
		else
		{
			TodoItems.Add(Model);
			


			var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
			var userEmail = authState.User.Identity.Name;

			var cpr = _dbContext.Cprs.FirstOrDefault(c => c.User == userEmail);

			var todoItem = new ToDoList
			{
					CprID = cpr,
					Item = Model.Name
			};

			_dbContext.ToDoLists.Add(todoItem);
			await _dbContext.SaveChangesAsync();

			ErrorMessage = null;
			AddTodoItemsToDatabase();
		}
	
		// clear inputText
		Model = new TodoItem();
	}

	private void LoadTodoItems()
	{

	}

	private void AddTodoItemsToDatabase()
	{
		// get cpr


	}

	public class TodoItem
	{
		public string? Name { get; set; }
	}

}